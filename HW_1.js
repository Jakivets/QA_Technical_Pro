//Приклад № 1. 'number' + 3 + 3

let result1 = 'number' + 3 + 3;
// Початкове значення - 'number', додається число 3, що перетворюється на рядок.
// Результат 'number3', до якого додається наступне число 3 (також розглядається як рядок).

console.log(result1) // Виведе: 'number33'

//Приклад № 2. null + 3

let result2 = null + 3;
// null перетворюється на число, що дорівнює 0, тому що null не може бути арифметично обчисленим.
// Тоді відбувається додавання числа 0 та 3.

console.log(result2) // Виведе: 3

//Приклад № 3. 5 && "qwerty"

let result3 = 5 && "qwerty";
// Оператор && вибирає другий операнд, якщо обидва операнди є істинними.
// Число 5 вважається істинним, тому повертається значення другого операнду "qwerty".

console.log(result3) // Виведе: qwerty

//Приклад № 4. +'40' + +'2' + "hillel";

let result4 = +'40' + +'2' + "hillel";
// +'40' та +'2' - унарний плюс перетворює рядки у числа: результати цих операцій - числа 40 та 2.Виконується додавання цих чисел.
//Результат - 42 (сума чисел) + 'hillel' (конкатенація числа з рядком) = '42hillel'.

console.log(result4) // Виведе: 42hillel

//Приклад № 5. '10' - 5 === 6;

let result5 = '10' - 5 === 6;
// Рядок '10' перетворюється у число 10.
//Виконується віднімання: 10 - 5 = 5.
//Порівняння 5 === 6 - результат false.

console.log(result5) // Виведе: false

//Приклад № 6. true + false

let result6 = true + false
//true трактується як число 1, а false - як число 0.
//Виконується додавання: 1 + 0 = 1.

console.log(result6) // Виведе: 1

//Приклад № 7. '4px' - 3

let result7 = '4px' - 3
// У цьому випадку, рядок '4px' не може бути конвертований у число напряму, оскільки перше значуще число (4) розділене літерами. Тому спроба виконати віднімання не буде успішною, і результатом буде спеціальне значення NaN (Not-a-Number). Це відображається, коли неможливо виконати арифметичну операцію між рядком і числом.

console.log(result7) // Виведе: NaN

//Приклад № 8. '4' - 3

let result8 = '4' - 3
//Рядок '4' перетворюється у число 4.
//Виконується віднімання: 4 - 3 = 1.

console.log(result8) // Виведе: 1

//Приклад № 9. '6' + 3 ** 0;

let result9 = '6' + 3 ** 0;

// 3 ** 0 дорівнює 1.
//Рядок '6' додається до числа 1, результат - '61'.

console.log(result9) // Виведе: 61

//Приклад № 10. 12 / '6'

let result10 = 12 / '6'
// Рядок '6' перетворюється у число 6.
//Виконується ділення: 12 / 6 = 2.

console.log(result10) // Виведе: 2

//Приклад № 11. '10' + (5 === 6)

let result11 = '10' + (5 === 6)
// Вираз 5 === 6 повертає false.
// Рядок '10' додається до false (який перетворюється у строку): результат - '10false'.

console.log(result11) // Виведе: 10false

//Приклад № 12. null == ''

let result12 = null == ''
// null не дорівнює порожній строкі '', тому результат порівняння - false.

console.log(result12) // Виведе: false

//Приклад № 13. 3 ** (9 / 3);

let result13 = 3 ** (9 / 3);
// Операція (9 / 3) дорівнює 3.
// Піднесення числа 3 до степеня 3: 3 ** 3 = 27.

console.log(result13) // Виведе: 27

//Приклад № 14. !!'false' == !!'true'

let result14 = !!'false' == !!'true'
// !!'false' перетворює рядок 'false' у логічне значення true, оскільки будь-який непорожній рядок є правдивим.
// Те саме відбувається з рядком 'true'.
// Порівняння true == true повертає true.

console.log(result14) // Виведе: true

//Приклад № 15. 0 || '0' && 1

let result15 = 0 || '0' && 1

// Оператор && має вищий пріоритет, тому вираз '0' && 1 буде обчислюватися першим.
// '0' && 1 - обидва операнди не є ложними (в контексті логічного І - &&), тому він поверне останній істинний операнд, тобто 1.
// Отже, після обчислення виразу ми отримаємо 1. Якщо переписати вираз у вигляді послідовних операцій, то це буде еквівалентно 0 || ('0' && 1), і результат буде 1, оскільки 1 є останнім істинним операндом.

console.log(result15) // Виведе: 1

//Приклад № 16. (+null == false) < 1;

let result16 = (+null == false) < 1;

// Оператор + перетворює null у число, яке дорівнює 0. Порівняння 0 == false вірне, оскільки false, конвертоване у число, також дорівнює 0. Отже, ця частина виразу повертає true.
//(true) < 1: Результат попереднього порівняння - true, що у контексті порівняння з числом 1 перетворюється на число 1.
// Отже, 1 < 1 не є правдивим, оскільки 1 не менше 1.

console.log(result16) // Виведе: false

//Приклад № 17. false && true || true

let result17 = false && true || true

// За правилом пріоритету операцій, спочатку виконується операція &&, яка має вищий пріоритет ніж ||.
//false && true - це логічне І, де один з операндів false, тому результат цієї операції буде false.
//Тепер false || true - це логічне АБО, де один із операндів true.

console.log(result17) // Виведе: true

//Приклад № 18. false && (false || true);

let result18 = false && (false || true);

// Вираження в дужках (false || true) буде true, оскільки false || true - це логічне АБО, де один з операндів true.
// Таким чином, отримаємо false && true, що є false, оскільки обидва операнди мають бути true для логічного І.

console.log(result18) // Виведе: false

//Приклад № 19. (+null == false) < 1 ** 5;

let result19 = (+null == false) < 1 ** 5;

// (+null == false): Операція (+) конвертує null у число, яке дорівнює 0. Порівняння 0 == false дає true, оскільки при порівнянні логічне false перетворюється в число 0, тому 0 дорівнює 0.
// 1 ** 5: Це піднесення числа 1 до степеня 5, що дорівнює 1.
// Отже, вираз (+null == false) < 1 ** 5 перетворюється в true < 1. У JavaScript значення true у контексті порівняння автоматично перетворюється в число 1, тоді як false перетворюється в 0.
// Отже, 1 < 1 - це неправда, оскільки 1 не менше 1. Тому результат виразу (+null == false) < 1 ** 5 буде false.

console.log(result19) // Виведе: false